Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id(\"java\")\r\n}\r\n\r\ngroup = \"org.example\"\r\nversion = \"1.0-SNAPSHOT\"\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    testImplementation(platform(\"org.junit:junit-bom:5.9.1\"))\r\n    testImplementation(\"org.junit.jupiter:junit-jupiter\")\r\n}\r\n\r\ntasks.test {\r\n    useJUnitPlatform()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	
+++ b/build.gradle.kts	
@@ -12,6 +12,10 @@
 dependencies {
     testImplementation(platform("org.junit:junit-bom:5.9.1"))
     testImplementation("org.junit.jupiter:junit-jupiter")
+    implementation ("com.fasterxml.jackson.core:jackson-core:2.16.1")
+    implementation ("com.fasterxml.jackson.core:jackson-annotations:2.16.1")
+    implementation ("com.fasterxml.jackson.core:jackson-databind:2.16.1")
+    
 }
 
 tasks.test {
Index: settings.gradle.kts
===================================================================
diff --git a/settings.gradle.kts b/settings.gradle.kts
deleted file mode 100644
--- a/settings.gradle.kts	
+++ /dev/null	
@@ -1,2 +0,0 @@
-rootProject.name = "FlowerShop"
-
Index: src/main/java/n1exercici1/Products/Tree.java
===================================================================
diff --git a/src/main/java/n1exercici1/Products/Tree.java b/src/main/java/n1exercici1/Products/Tree.java
deleted file mode 100644
--- a/src/main/java/n1exercici1/Products/Tree.java	
+++ /dev/null	
@@ -1,31 +0,0 @@
-package n1exercici1.Products;
-
-import static java.lang.String.valueOf;
-
-public class Tree extends  Product {
-    private double height;
-
-    public Tree(String name, double price, double height) {
-        super(name, price);
-        this.height = height;
-    }
-
-    public double getHeight() {
-        return height;
-    }
-
-    @Override
-    public String getType() {
-        return "Tree";
-    }
-
-    @Override
-    public String getAttribute() {
-        return valueOf(this.height); // to convert double to its String
-    }
-
-    @Override
-    public String toString() {
-        return "Tree " +getName() + ", height" +this.height +". Price "+getPrice() +"€.";
-    }
-}
Index: src/main/java/n1exercici1/Products/Product.java
===================================================================
diff --git a/src/main/java/n1exercici1/Products/Product.java b/src/main/java/n1exercici1/Products/Product.java
deleted file mode 100644
--- a/src/main/java/n1exercici1/Products/Product.java	
+++ /dev/null	
@@ -1,34 +0,0 @@
-package n1exercici1.Products;
-
-public abstract class Product {
-
-    private int idProduct;
-    private static int nextID = 1;
-    protected String name;
-    protected double price;
-
-    public Product(String name, double price) {
-        this.idProduct = nextID++;
-        this.name = name;
-        this.price = price;
-    }
-
-    public int getIdProduct() {
-        return idProduct;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public double getPrice() {
-        return price;
-    }
-
-    public abstract String getType();
-
-    public abstract String getAttribute();
-
-    public abstract String toString();
-}
-
Index: src/main/java/n1exercici1/Products/Flower.java
===================================================================
diff --git a/src/main/java/n1exercici1/Products/Flower.java b/src/main/java/n1exercici1/Products/Flower.java
deleted file mode 100644
--- a/src/main/java/n1exercici1/Products/Flower.java	
+++ /dev/null	
@@ -1,29 +0,0 @@
-package n1exercici1.Products;
-
-public class Flower extends Product {
-    private String color;
-
-    public Flower(String name, double price, String color) {
-        super(name, price);
-        this.color = color;
-    }
-
-    public String getColor() {
-        return color;
-    }
-
-    @Override
-    public String getType() {
-        return "Flower";
-    }
-
-    @Override
-    public String getAttribute() {
-        return this.color;
-    }
-
-    @Override
-    public String toString() {
-        return "Flower " +getName() + " in color " +this.color + ". Price " +getPrice()+"€.";
-    }
-}
Index: src/main/java/n1exercici1/FlowerShop.java
===================================================================
diff --git a/src/main/java/n1exercici1/FlowerShop.java b/src/main/java/n1exercici1/FlowerShop.java
deleted file mode 100644
--- a/src/main/java/n1exercici1/FlowerShop.java	
+++ /dev/null	
@@ -1,6 +0,0 @@
-package n1exercici1;
-
-public class FlowerShop {
-    private String name;
-
-}
Index: src/main/java/n1exercici1/Products/Enum/MaterialType.java
===================================================================
diff --git a/src/main/java/n1exercici1/Products/Enum/MaterialType.java b/src/main/java/n1exercici1/Products/Enum/MaterialType.java
deleted file mode 100644
--- a/src/main/java/n1exercici1/Products/Enum/MaterialType.java	
+++ /dev/null	
@@ -1,6 +0,0 @@
-package n1exercici1.Products.Enum;
-
-public enum MaterialType {
-    WOOD,
-    PLASTIC;
-}
Index: src/main/java/n1exercici1/Input.java
===================================================================
diff --git a/src/main/java/n1exercici1/Input.java b/src/main/java/n1exercici1/Input.java
deleted file mode 100644
--- a/src/main/java/n1exercici1/Input.java	
+++ /dev/null	
@@ -1,44 +0,0 @@
-package n1exercici1;
-
-import java.util.InputMismatchException;
-import java.util.Scanner;
-
-public class Input {
-    public static int askInt(String message) {
-        Scanner input = new Scanner (System.in);
-        int number = 0;
-        boolean correct = false;
-        do {
-            System.out.print(message);
-            try {
-                number = input.nextInt();
-                correct = true;
-            } catch (InputMismatchException ex) {
-                System.out.println("Format error. Enter an integer");
-            }
-            input.nextLine();
-        } while (!correct);
-        return number;
-    }
-    public static double askDouble(String message) {
-        Scanner input = new Scanner (System.in);
-        double number = 0;
-        boolean correct = false;
-        do {
-            System.out.print(message);
-            try {
-                number = input.nextDouble();
-                correct = true;
-            } catch (InputMismatchException ex) {
-                System.out.println("Format error. Enter a number");
-            }
-            input.nextLine();
-        } while (!correct);
-        return number;
-    }
-    public static String askString (String message) {
-        Scanner input = new Scanner (System.in);
-        System.out.print(message);
-        return input.nextLine();
-    }
-}
Index: src/main/java/n1exercici1/Main.java
===================================================================
diff --git a/src/main/java/n1exercici1/Main.java b/src/main/java/n1exercici1/Main.java
deleted file mode 100644
--- a/src/main/java/n1exercici1/Main.java	
+++ /dev/null	
@@ -1,7 +0,0 @@
-package n1exercici1;
-
-public class Main {
-    public static void main(String[] args) {
-
-    }
-}
Index: src/main/java/n1exercici1/Products/Decoration.java
===================================================================
diff --git a/src/main/java/n1exercici1/Products/Decoration.java b/src/main/java/n1exercici1/Products/Decoration.java
deleted file mode 100644
--- a/src/main/java/n1exercici1/Products/Decoration.java	
+++ /dev/null	
@@ -1,28 +0,0 @@
-package n1exercici1.Products;
-
-import n1exercici1.Products.Enum.MaterialType;
-
-public class Decoration extends  Product{
-    private String  material;
-
-    public Decoration(String name, double price, MaterialType materialType) {
-        super(name, price);
-        this.material=materialType.name().toLowerCase();
-
-    }
-
-    @Override
-    public String getType() {
-        return "Decoration";
-    }
-
-    @Override
-    public String getAttribute() {
-        return this.material;
-    }
-
-    @Override
-    public String toString() {
-        return "Decoration: " +getName() +" made of " +this.material +". Price " +getPrice() +"€.";
-    }
-}
Index: src/main/java/n1exercici1/beans/Tree.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/beans/Tree.java b/src/main/java/n1exercici1/beans/Tree.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/beans/Tree.java	
@@ -0,0 +1,41 @@
+package n1exercici1.beans;
+
+import java.io.Serializable;
+
+import com.fasterxml.jackson.annotation.JsonAutoDetect;
+
+@JsonAutoDetect
+public class Tree extends Product implements Serializable{
+
+	
+	private static final long serialVersionUID = 1L;
+	private int height;
+
+	public Tree(String name, double price, int stock) {
+		super(name, price, stock);
+	}
+
+	public Tree(String name, double price, int stock, int height) {
+		super(name, price, stock);
+		this.height = height;
+	}
+
+	public int getHeight() {
+		return height;
+	}
+
+	public void setHeight(int height) {
+		this.height = height;
+	}
+
+	@Override
+	public String toString() {
+		return "Tree [height=" + height + "]";
+	}
+	
+}
+
+
+
+	
+	
Index: src/main/java/n1exercici1/factories/ProductFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/factories/ProductFactory.java b/src/main/java/n1exercici1/factories/ProductFactory.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/factories/ProductFactory.java	
@@ -0,0 +1,24 @@
+package n1exercici1.factories;
+
+import n1exercici1.beans.Decoration;
+import n1exercici1.beans.Flower;
+import n1exercici1.beans.Product;
+import n1exercici1.beans.Tree;
+import n1exercici1.utils.Constants;
+
+public class ProductFactory {
+	    
+	public static Product createProduct(String type, String name, double price, int stock) {
+        
+		switch (type.toLowerCase()) {
+	    	case Constants.Types.TREE:
+	    		return new Tree(name, price, stock);
+	        case Constants.Types.FLOWER:
+	            return new Flower(name, price, stock);
+	        case Constants.Types.DECORATION:
+	            return new Decoration(name, price, stock);
+	        default:
+	            throw new IllegalArgumentException(Constants.Exceptions.TYPE + type);
+		}
+	}
+}
Index: src/main/java/n1exercici1/main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/main/Main.java b/src/main/java/n1exercici1/main/Main.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/main/Main.java	
@@ -0,0 +1,12 @@
+package n1exercici1.main;
+
+import n1exercici1.handlers.AppHandler;
+
+public class Main {
+
+	public static void main(String[] args) {
+		
+		AppHandler shop = new AppHandler();
+		shop.runApp();
+	}
+}
Index: src/main/java/n1exercici1/singletons/StockSingleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/singletons/StockSingleton.java b/src/main/java/n1exercici1/singletons/StockSingleton.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/singletons/StockSingleton.java	
@@ -0,0 +1,39 @@
+package n1exercici1.singletons;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import n1exercici1.beans.Product;
+
+
+public class StockSingleton {
+	
+private static StockSingleton stockSingleton;
+	
+	private List<Product> stockList;
+	
+	private StockSingleton() {
+		super();
+		stockList = new ArrayList<>();
+	}
+	
+	public static StockSingleton getStockSingleton() {
+		if(stockSingleton == null) {
+			stockSingleton = new StockSingleton();
+		}
+		return stockSingleton;
+	}
+
+	public List<Product> getStockList() {
+		return stockList;
+	}
+
+	public void setStockList(List<Product> stockList) {
+		this.stockList = stockList;
+	}
+
+	@Override
+	public String toString() {
+		return "StockSingleton [stockList=" + stockList + "]";
+	}	
+}
Index: src/main/java/n1exercici1/utils/Validations.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/utils/Validations.java b/src/main/java/n1exercici1/utils/Validations.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/utils/Validations.java	
@@ -0,0 +1,14 @@
+package n1exercici1.utils;
+
+public class Validations {
+	
+	public static boolean validateMenuFourOption(String option) {
+		
+		return option.matches("^[0-4]{1}$");
+	}
+	
+	public static boolean validateId(String id) {
+		
+		return id.matches("^[1-9]{1}[0-9]*$");
+	}
+}
Index: src/main/java/n1exercici1/beans/Decoration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/beans/Decoration.java b/src/main/java/n1exercici1/beans/Decoration.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/beans/Decoration.java	
@@ -0,0 +1,36 @@
+package n1exercici1.beans;
+
+import java.io.Serializable;
+
+import com.fasterxml.jackson.annotation.JsonAutoDetect;
+
+@JsonAutoDetect
+public class Decoration extends Product implements Serializable{
+
+	private static final long serialVersionUID = 1L;
+	private String type;
+	
+	public Decoration(String name, double price, int stock) {
+		super(name, price, stock);
+		
+	}
+
+	public Decoration(String name, double price, int stock, String type) {
+		super(name, price, stock);
+		this.type = type;
+	}
+
+	public String getType() {
+		return type;
+	}
+
+	public void setType(String type) {
+		this.type = type;
+	}
+
+	@Override
+	public String toString() {
+		return "Decoration [type=" + type + "]";
+	}
+
+}
Index: src/main/java/n1exercici1/beans/Flower.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/beans/Flower.java b/src/main/java/n1exercici1/beans/Flower.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/beans/Flower.java	
@@ -0,0 +1,36 @@
+package n1exercici1.beans;
+
+import java.io.Serializable;
+
+import com.fasterxml.jackson.annotation.JsonAutoDetect;
+
+@JsonAutoDetect
+public class Flower extends Product implements Serializable {
+	
+	private static final long serialVersionUID = 1L;
+	private String colour;
+	
+	
+	public Flower(String name, double price, int stock) {
+		super(name, price, stock);
+	}
+
+	public Flower(String name, double price, int stock, String colour) {
+		super(name, price, stock );
+		this.colour = colour;
+	}
+
+	public String getColour() {
+		return colour;
+	}
+
+	public void setColour(String colour) {
+		this.colour = colour;
+	}
+
+	@Override
+	public String toString() {
+		return "Flower [colour=" + colour + "]";
+	}
+
+}
Index: src/main/java/n1exercici1/beans/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/beans/Product.java b/src/main/java/n1exercici1/beans/Product.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/beans/Product.java	
@@ -0,0 +1,54 @@
+package n1exercici1.beans;
+
+import com.fasterxml.jackson.annotation.JsonAutoDetect;
+
+@JsonAutoDetect
+public abstract class Product {
+	private int idProduct;
+    private static int nextID = 1;
+    protected String name;
+    protected double price;
+    protected int stock;
+
+    public Product(String name, double price, int stock) {
+        this.idProduct = nextID++;
+        this.name = name;
+        this.price = price;
+        this.stock = stock;
+    }
+
+    public int getIdProduct() {
+        return idProduct;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public double getPrice() {
+        return price;
+    }
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public void setPrice(double price) {
+		this.price = price;
+	}
+
+	public int getStock() {
+		return stock;
+	}
+
+	public void setStock(int stock) {
+		this.stock = stock;
+	}
+
+	@Override
+	public String toString() {
+		return "Product [idProduct=" + idProduct + ", name=" + name + ", price=" + price + ", stock=" + stock + "]";
+	}
+
+	
+}
Index: src/main/java/n1exercici1/singletons/TicketSingleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/singletons/TicketSingleton.java b/src/main/java/n1exercici1/singletons/TicketSingleton.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/singletons/TicketSingleton.java	
@@ -0,0 +1,37 @@
+package n1exercici1.singletons;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TicketSingleton {
+
+private static TicketSingleton ticketSingleton;
+	
+	private List<String> ticketsList;
+	
+	private TicketSingleton() {
+		super();
+		ticketsList = new ArrayList<>();
+	}
+	
+	public static synchronized TicketSingleton getTicketSingleton() {
+		if(ticketSingleton == null) {
+			ticketSingleton = new TicketSingleton();
+		}
+		return ticketSingleton;
+	}
+
+	public List<String> getticketsList() {
+		return ticketsList;
+	}
+
+	public void setStockList(List<String> ticketsList) {
+		this.ticketsList = ticketsList;
+	}
+
+	@Override
+	public String toString() {
+		return "TicketSingleton [ticketsList=" + ticketsList + "]";
+	}
+
+}
Index: src/main/java/n1exercici1/exceptions/IllegalArgumentFactoryException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/exceptions/IllegalArgumentFactoryException.java b/src/main/java/n1exercici1/exceptions/IllegalArgumentFactoryException.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/exceptions/IllegalArgumentFactoryException.java	
@@ -0,0 +1,10 @@
+package n1exercici1.exceptions;
+
+public class IllegalArgumentFactoryException extends Exception{
+	
+private static final long serialVersionUID = 1L;
+	
+	public IllegalArgumentFactoryException(String message) {
+		super(message);
+	}
+}
Index: src/main/resources/stock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/stock.json b/src/main/resources/stock.json
new file mode 100644
--- /dev/null	
+++ b/src/main/resources/stock.json	
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
Index: src/main/resources/tickets.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/tickets.json b/src/main/resources/tickets.json
new file mode 100644
--- /dev/null	
+++ b/src/main/resources/tickets.json	
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"55e38529-ac3d-400c-9400-b59071d9d90b\" name=\"Changes\" comment=\"clases de las decoraciones creadas - Carla\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/n1exercici1/Products/Product.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/n1exercici1/Products/Product.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 0\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ewrPp5bg73uBUZ00FTtGIX16Yi\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-21.0.2-openjdk-21.0.2-4caba194b151-4f524021\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"55e38529-ac3d-400c-9400-b59071d9d90b\" name=\"Changes\" comment=\"\" />\r\n      <created>1712826464259</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1712826464259</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"First commit carla\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712827205427</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712827205427</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"clases de las decoraciones creadas - Carla\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712835976517</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712835976517</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"First commit carla\" />\r\n    <MESSAGE value=\"clases de las decoraciones creadas - Carla\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"clases de las decoraciones creadas - Carla\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,8 +5,42 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="55e38529-ac3d-400c-9400-b59071d9d90b" name="Changes" comment="clases de las decoraciones creadas - Carla">
+      <change afterPath="$PROJECT_DIR$/Flower_shop Model.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Flower_shop.sql" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/beans/Decoration.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/beans/Flower.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/beans/Product.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/beans/Tree.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/database/SQLDatabaseConnection.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/database/SQLDatabaseQueries.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/enums/DecorationEnum.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/exceptions/IllegalArgumentFactoryException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/factories/ProductFactory.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/handlers/AppHandler.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/handlers/CatalogueHandler.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/handlers/SalesHandler.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/handlers/StockHandler.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/handlers/TextMenuHandler.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/main/Main.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/singletons/StockSingleton.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/singletons/TicketSingleton.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/utils/Constants.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/utils/Validations.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/products.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/stock.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tickets.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/dbnavigator.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dbnavigator.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/n1exercici1/Products/Product.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/n1exercici1/Products/Product.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/build.gradle.kts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/settings.gradle.kts" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/n1exercici1/FlowerShop.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/n1exercici1/Input.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/n1exercici1/Main.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/n1exercici1/Products/Decoration.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/n1exercici1/Products/Enum/MaterialType.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/n1exercici1/Products/Flower.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/n1exercici1/Products/Product.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/n1exercici1/Products/Tree.java" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -27,6 +61,20 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;caroga87&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">
+    <option name="selectedUrlAndAccountId">
+      <UrlAndAccount>
+        <option name="accountId" value="c9685857-c520-411f-879e-3dcc3b3a26b6" />
+        <option name="url" value="https://github.com/caroga87/Flower_shop.git" />
+      </UrlAndAccount>
+    </option>
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 0
@@ -42,10 +90,25 @@
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;Merging master&quot;,
     &quot;kotlin-language-version-configured&quot;: &quot;true&quot;
   }
 }</component>
+  <component name="RunManager">
+    <configuration default="true" type="JetRunConfigurationType">
+      <module name="Flowershop" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
+      <module name="Flowershop" />
+      <option name="filePath" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+  </component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
@@ -78,7 +141,15 @@
       <option name="project" value="LOCAL" />
       <updated>1712835976517</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="clases de las decoraciones creadas - Carla">
+      <option name="closed" value="true" />
+      <created>1713438177997</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1713438177997</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
Index: Flower_shop.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Flower_shop.sql b/Flower_shop.sql
new file mode 100644
--- /dev/null	
+++ b/Flower_shop.sql	
@@ -0,0 +1,61 @@
+DROP DATABASE IF EXISTS flower_shop;
+
+CREATE DATABASE flower_shop CHARACTER SET utf8mb4;
+
+USE flower_shop;
+
+create table product_types	(
+	product_type_id int unsigned not null primary key,
+    product_type_name enum('tree', 'flower','decoration')
+);
+
+create table products	(
+	product_id int unsigned auto_increment primary key not null,
+    product_name varchar(100) not null,
+    unit_price double not null,
+    product_type_id int unsigned not null,
+    foreign key(product_type_id) references product_types(product_type_id)
+);
+
+create table trees	(
+	tree_id int unsigned auto_increment primary key not null,
+    height int unsigned not null,
+    product_type_id int unsigned not null,
+    foreign key (product_type_id) references product_types (product_type_id)
+);
+
+create table flowers (
+	flower_id int unsigned auto_increment primary key not null,
+    colour varchar(50) not null,
+	product_type_id int unsigned not null,
+    foreign key (product_type_id) references product_types (product_type_id)
+);
+
+create table decorations	(
+	decoration_id int unsigned auto_increment primary key not null,
+    material enum('wood', 'plastic') not null,
+	product_type_id int unsigned not null,
+    foreign key (product_type_id) references product_types (product_type_id)
+);
+
+create table tickets	(
+	ticket_id int unsigned auto_increment primary key not null,
+    time_created timestamp not null,
+    total_amount double not null
+);
+
+create table sold_products	(
+	sold_product_id int unsigned auto_increment primary key not null,
+	ticket_id int unsigned not null,
+    product_id int unsigned not null,
+    quantity int unsigned not null,
+    foreign key (ticket_id) references tickets(ticket_id),
+	foreign key (product_id) references products(product_id)
+);
+
+create table stock	(
+	stock_id int unsigned auto_increment primary key not null,
+    product_id int unsigned not null,
+    quantity int unsigned not null,
+    foreign key(product_id) references products(product_id)
+);
\ No newline at end of file
Index: src/main/resources/products.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/products.json b/src/main/resources/products.json
new file mode 100644
--- /dev/null	
+++ b/src/main/resources/products.json	
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
Index: src/main/java/n1exercici1/enums/DecorationEnum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/enums/DecorationEnum.java b/src/main/java/n1exercici1/enums/DecorationEnum.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/enums/DecorationEnum.java	
@@ -0,0 +1,17 @@
+package n1exercici1.enums;
+
+public enum DecorationEnum {
+
+	PLASTIC("Plastic"),
+	WOOD("Wood");
+	
+	private String materialType;
+
+	private DecorationEnum(String materialType) {
+		this.materialType = materialType;
+	}
+
+	public String getMaterialType() {
+		return materialType;
+	}
+}
Index: src/main/java/n1exercici1/handlers/SalesHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/handlers/SalesHandler.java b/src/main/java/n1exercici1/handlers/SalesHandler.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/handlers/SalesHandler.java	
@@ -0,0 +1,51 @@
+package n1exercici1.handlers;
+
+import n1exercici1.utils.Constants;
+import n1exercici1.utils.Validations;
+
+public class SalesHandler {
+
+	private AppHandler appHandler;
+	
+	public SalesHandler() {
+		super();
+		this.appHandler = new AppHandler();
+	}
+	
+	public void runSales() {
+		
+		String menuOption = "";
+		
+		do {
+			appHandler.printText(TextMenuHandler.getSalesMenu());
+			
+			do {
+				appHandler.printText(TextMenuHandler.getChooseAnOption());
+				menuOption = appHandler.readInput().trim();
+			}while(!Validations.validateMenuFourOption(menuOption));
+			
+			processSalesOption(menuOption);
+			
+		}while(!menuOption.equals("0"));
+	}
+	
+	private void processSalesOption(String menuOption) {
+
+		switch (menuOption) {
+			case "1": 
+				
+				break;
+			case "2":
+				
+				break;
+			case "3":
+				
+				break;
+			case "0":
+				appHandler.printText(TextMenuHandler.getExitMessage(Constants.Menu.SALES));
+				break;
+			default:
+				break;
+		}		
+	}
+}
Index: src/main/java/n1exercici1/handlers/StockHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/handlers/StockHandler.java b/src/main/java/n1exercici1/handlers/StockHandler.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/handlers/StockHandler.java	
@@ -0,0 +1,51 @@
+package n1exercici1.handlers;
+
+import n1exercici1.utils.Constants;
+import n1exercici1.utils.Validations;
+
+public class StockHandler {
+	
+	private AppHandler appHandler;
+	
+	public StockHandler() {
+		super();
+		this.appHandler = new AppHandler();
+	}
+	
+	public void runStock() {
+		
+		String menuOption = "";
+		
+		do {
+			appHandler.printText(TextMenuHandler.getStockMenu());
+			
+			do {
+				appHandler.printText(TextMenuHandler.getChooseAnOption());
+				menuOption = appHandler.readInput().trim();
+			}while(!Validations.validateMenuFourOption(menuOption));
+			
+			processStockOption(menuOption);
+			
+		}while(!menuOption.equals("0"));
+	}
+	
+	private void processStockOption(String menuOption) {
+
+		switch (menuOption) {
+			case "1": 
+				
+				break;
+			case "2":
+				
+				break;
+			case "3":
+				
+				break;
+			case "0":
+				appHandler.printText(TextMenuHandler.getExitMessage(Constants.Menu.STOCK));
+				break;
+			default:
+				break;
+		}		
+	}
+}
Index: src/main/java/n1exercici1/handlers/TextMenuHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/handlers/TextMenuHandler.java b/src/main/java/n1exercici1/handlers/TextMenuHandler.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/handlers/TextMenuHandler.java	
@@ -0,0 +1,86 @@
+package n1exercici1.handlers;
+
+import n1exercici1.utils.Constants;
+
+public class TextMenuHandler {
+
+	public static String getMainMenu() {
+		
+		StringBuilder sb = new StringBuilder();
+		sb.append("---- FLOWER SHOP ----\n\n");
+		sb.append("1: Catalogue.\n");
+		sb.append("2: Stock.\n");
+		sb.append("3: Sales.\n");
+		sb.append("0: Exit.\n\n");
+		return sb.toString();
+	}
+	
+	public static String getCatalogueMenu() {
+		
+		StringBuilder sb = new StringBuilder();
+		sb.append("1: Create/Add Product.\n");
+		sb.append("2: Remove Product.\n");
+		sb.append("3: Show Catalogue.\n");
+		sb.append("0: Exit.\n\n");
+		return sb.toString();
+	}
+	
+	public static String getAskAtribute(String productType)	{
+		
+		StringBuilder sb = new StringBuilder();
+		if(productType.equalsIgnoreCase(Constants.Types.TREE)) {
+			sb.append("Write height tree: \n");
+		}else if(productType.equalsIgnoreCase(Constants.Types.FLOWER)) {
+			sb.append("Write colour flower: \n");
+		}else if(productType.equalsIgnoreCase(Constants.Types.DECORATION)) {
+			sb.append("Write the material: \n");
+		}else {
+			throw new IllegalArgumentException(Constants.Exceptions.TYPE + productType);
+		}
+		
+		return sb.toString();
+	}
+	
+
+	public static String getStockMenu() {
+		
+		StringBuilder sb = new StringBuilder();
+		sb.append("1: General Stock.\n");
+		sb.append("2: Stock Quantity.\n");
+		sb.append("3: Stock Value.\n");
+		sb.append("0: Exit.\n\n");
+		return sb.toString();
+	}
+	
+	public static String getSalesMenu() {
+		
+		StringBuilder sb = new StringBuilder();
+		sb.append("1: Create Ticket.\n");
+		sb.append("2: Sales History.\n");
+		sb.append("3: Accounting.\n");
+		sb.append("0: Exit.\n\n");
+		return sb.toString();
+	}
+	
+	public static String getChooseAnOption() {
+		
+		return Constants.Messages.CHOOSE;
+	}
+	
+	public static String getExitMessage(String switchType) {
+		
+		
+		if(switchType.equalsIgnoreCase("App")) {
+			switchType = Constants.Messages.EXIT_APP;
+		}else if(switchType.equalsIgnoreCase("Catalogue")) {
+			switchType = Constants.Messages.EXIT_CATALOGUE;
+		}else if(switchType.equalsIgnoreCase("Stock")) {
+			switchType = Constants.Messages.EXIT_STOCK;
+		}else if(switchType.equalsIgnoreCase("Sales")) {
+			switchType = Constants.Messages.EXIT_SALES;
+		}else {
+			throw new IllegalArgumentException(Constants.Exceptions.TYPE);
+		}
+		return switchType;
+	}
+}
Index: src/main/java/n1exercici1/utils/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/utils/Constants.java b/src/main/java/n1exercici1/utils/Constants.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/utils/Constants.java	
@@ -0,0 +1,33 @@
+package n1exercici1.utils;
+
+public class Constants {
+	
+	public class Exceptions	{
+		public static final String TYPE = "Invalid product type.";
+	}
+	
+	public class Messages {
+		public static final String CHOOSE = "Choose a valid option:\n";
+		public static final String ID = "Enter a valid id: \n";
+		public static final String ID_NOT_FOUND = "Id not found.\n";
+		public static final String EXIT_APP = "Closing down.";
+		public static final String EXIT_CATALOGUE = "Closing down catalogue.\n";
+		public static final String EXIT_STOCK = "Closing down stock.\n";
+		public static final String EXIT_SALES = "Closing down sales.\n";
+		public static final String PRODUCT_ADD = "Product was added successfully.\n";
+		public static final String PRODUCT_REMOVE = "The product was removed successfully.\n";
+	}
+	
+	public class Menu {
+		public static final String APP = "App";
+		public static final String CATALOGUE = "Catalogue";
+		public static final String STOCK = "Stock";
+		public static final String SALES = "Sales";
+	}
+	
+	public class Types	{
+		public static final String TREE = "Tree";
+		public static final String FLOWER = "Flower";
+		public static final String DECORATION = "Decoration";
+	}	
+}
Index: src/main/java/n1exercici1/database/SQLDatabaseConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/database/SQLDatabaseConnection.java b/src/main/java/n1exercici1/database/SQLDatabaseConnection.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/database/SQLDatabaseConnection.java	
@@ -0,0 +1,23 @@
+package n1exercici1.database;
+
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+
+public class SQLDatabaseConnection {
+
+	private Connection databaseConnection = null;
+
+	 public SQLDatabaseConnection(String url, String user, String password) {
+	     super(); 	
+		 try {
+			databaseConnection = DriverManager.getConnection(url, user, password);
+		} catch (SQLException e) {
+			System.out.println(e);
+		}
+	 }
+
+	public Connection getDatabaseConnection() {
+		return databaseConnection;
+	}
+}
Index: src/main/java/n1exercici1/database/SQLDatabaseQueries.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/database/SQLDatabaseQueries.java b/src/main/java/n1exercici1/database/SQLDatabaseQueries.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/database/SQLDatabaseQueries.java	
@@ -0,0 +1,43 @@
+package n1exercici1.database;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
+
+public class SQLDatabaseQueries {
+
+	private Connection createConnection() {
+		
+		SQLDatabaseConnection connection = new SQLDatabaseConnection("jdbc:mysql://localhost/Flower_shop",
+				"root", "Claudio2023!");
+		
+		return connection.getDatabaseConnection();
+	}
+	
+
+	public void insertProduct(String name, int price) {
+		
+		Connection connection = createConnection();
+		
+		PreparedStatement statement = null;
+		try {
+			statement = connection.prepareStatement("insert into products(product_name, price) values(?,?)");
+			statement.setString(1, name);
+		} catch (SQLException e) {
+			System.out.println(e);
+		}
+		
+		try {
+			statement.executeUpdate();
+		} catch (SQLException e) {
+			System.out.println(e);
+		}
+		
+		try {
+			connection.close();
+		} catch (SQLException e) {
+			System.out.println(e);
+		}
+	}	
+}
Index: src/main/java/n1exercici1/handlers/AppHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/handlers/AppHandler.java b/src/main/java/n1exercici1/handlers/AppHandler.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/handlers/AppHandler.java	
@@ -0,0 +1,93 @@
+package n1exercici1.handlers;
+
+import java.util.Scanner;
+
+import n1exercici1.utils.Constants;
+import n1exercici1.utils.Validations;
+
+public class AppHandler {
+	
+	private static Scanner scanner;
+	
+	public AppHandler() {
+		super();
+		AppHandler.scanner = new Scanner(System.in);
+	}
+	
+	public void runApp() {
+		
+		String menuOption = "";
+		
+		do {
+			showMenu(Constants.Menu.APP);
+			
+			do {
+				printText(TextMenuHandler.getChooseAnOption());
+				menuOption = readInput().trim();
+			}while(!Validations.validateMenuFourOption(menuOption));
+			
+			processMainOption(menuOption);
+			
+		}while(!menuOption.equals("0"));
+		
+		closeScanner();
+	}
+
+	private void showMenu(String menu) {
+		
+		String menuText = "";
+		
+		if(menu.equalsIgnoreCase(Constants.Menu.APP)) {
+			menuText = TextMenuHandler.getMainMenu();
+		}else if(menu.equalsIgnoreCase(Constants.Menu.CATALOGUE)) {
+			menuText = TextMenuHandler.getCatalogueMenu();
+		}else if(menu.equalsIgnoreCase(Constants.Menu.STOCK)) {
+			menuText = TextMenuHandler.getStockMenu();
+		}else if(menu.equalsIgnoreCase(Constants.Menu.SALES)) {
+			menuText = TextMenuHandler.getSalesMenu();
+		}else {
+			throw new IllegalArgumentException(Constants.Exceptions.TYPE);
+		} 
+		printText(menuText);
+	}
+
+	private void processMainOption(String menuOption) {
+
+		switch (menuOption) {
+			case "1": 
+				CatalogueHandler catalogue = new CatalogueHandler();
+				catalogue.runCatalogue();
+				break;
+			case "2":
+				StockHandler stock = new StockHandler();
+				stock.runStock();
+				break;
+			case "3":
+				SalesHandler sales = new SalesHandler();
+				sales.runSales();
+				break;
+			case "0":
+				printText(TextMenuHandler.getExitMessage(Constants.Menu.APP));
+				break;
+			default:
+				break;
+		}		
+	}
+	
+	
+	public void printText(String text) {
+		
+		System.out.println(text);
+	}
+	
+	//scanner methods.
+	public String readInput() {
+		
+		return scanner.nextLine();
+	}
+	
+	
+	private void closeScanner() {
+		scanner.close();
+	}
+}
Index: src/main/java/n1exercici1/handlers/CatalogueHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/n1exercici1/handlers/CatalogueHandler.java b/src/main/java/n1exercici1/handlers/CatalogueHandler.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/n1exercici1/handlers/CatalogueHandler.java	
@@ -0,0 +1,67 @@
+package n1exercici1.handlers;
+
+import n1exercici1.utils.Constants;
+import n1exercici1.utils.Validations;
+
+public class CatalogueHandler {
+	
+	private AppHandler appHandler;
+	
+	public CatalogueHandler() {
+		super();
+		this.appHandler = new AppHandler();
+	}
+	
+	public void runCatalogue() {
+		
+		String menuOption = "";
+		
+		do {
+			appHandler.printText(TextMenuHandler.getCatalogueMenu());
+			
+			do {
+				appHandler.printText(TextMenuHandler.getChooseAnOption());
+				menuOption = appHandler.readInput().trim();
+			}while(!Validations.validateMenuFourOption(menuOption));
+			
+			processCatalogueOption(menuOption);
+			
+		}while(!menuOption.equals("0"));
+	}
+	
+	private void processCatalogueOption(String menuOption) {
+
+		switch (menuOption) {
+			case "1": 
+				appHandler.printText(createProduct());
+				break;
+			case "2":
+				appHandler.printText(removeProduct());
+				break;
+			case "3":
+				showAllProducts();
+				break;
+			case "0":
+				appHandler.printText(TextMenuHandler.getExitMessage(Constants.Menu.CATALOGUE));
+				break;
+			default:
+				break;
+		}		
+	}
+	
+	private String createProduct() {
+		
+		
+		return "";
+	}
+	
+	private String removeProduct() {
+		
+		return "";
+	}
+	
+	private void showAllProducts() {
+		
+	
+	}
+}
